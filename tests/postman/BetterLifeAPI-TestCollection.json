{
	"info": {
		"_postman_id": "3743cc2a-ebc6-4056-adc1-83ebd1f5e444",
		"name": "BetterLifeAPI Tests",
		"description": "The following collection includes tests that must be run sequentually in order to test the functionality of the API. While some variables are predefined in the collection for reference, GET, PATCH, and DELETE requests utlize the ID variable generated by the post request. Because of this, running a GET, PATCH or DELETE command seperately may return a 400 Error. For these, utilize the predefined variables when appropriate.",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "30656523"
	},
	"item": [
		{
			"name": "Customer",
			"item": [
				{
					"name": "200 OK",
					"item": [
						{
							"name": "Create Customer",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Extract the response JSON",
											"var response = pm.response.json();",
											"var customer = response[\"data\"];",
											"",
											"// Define the expected fields for type Customer",
											"var expectedFields = [\"id\", \"firstName\", \"lastName\", \"email\", \"netWorth\", \"podRef\"];",
											"",
											"// Test for expected fields are present in the response",
											"pm.test(\"Response contains expected Customer fields\", function() {",
											"    // Loop through each expected field",
											"    expectedFields.forEach(function(field) {",
											"        // Check if the field exists in the response",
											"        pm.expect(customer.hasOwnProperty(field)).to.be.true;",
											"    });",
											"        ",
											"});",
											"",
											"// Test status code should be 200",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"// Test for response time",
											"pm.test(\"Response time is less than 200ms\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(200);",
											"});",
											"",
											"pm.environment.set(\"Generated-CustomerId\", customer.id);"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"firstName\": \"Test_Example_First_Name\",\n    \"lastName\": \"Test_Example_Last_Name\",\n    \"email\": \"Test@example.com\",\n    \"netWorth\": 999999999,\n    \"podRef\": \"382429915634466884\"\n}\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base-url}}/api/customer/",
									"host": [
										"{{base-url}}"
									],
									"path": [
										"api",
										"customer",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "Get All Customers",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Extract the response JSON",
											"var response = pm.response.json();",
											"var data = response[\"data\"][\"data\"];",
											"",
											"// Define the expected fields for type Customer",
											"var expectedFields = [\"id\", \"firstName\", \"lastName\", \"email\", \"netWorth\", \"podRef\"];",
											"",
											"// Test for expected fields are present in the response",
											"pm.test(\"Response contains expected Customer fields\", function() {",
											"    data.forEach(function(customer){",
											"        // Loop through each expected field",
											"        expectedFields.forEach(function(field) {",
											"            // Check if the field exists in the response",
											"            pm.expect(customer.hasOwnProperty(field)).to.be.true;",
											"        });",
											"    })",
											"        ",
											"});",
											"",
											"// Test status code should be 200",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"// Test for response time",
											"pm.test(\"Response time is less than 200ms\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(200);",
											"});",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{base-url}}/api/customer?count=10",
									"host": [
										"{{base-url}}"
									],
									"path": [
										"api",
										"customer"
									],
									"query": [
										{
											"key": "count",
											"value": "10"
										},
										{
											"key": "cursor",
											"value": "",
											"disabled": true
										},
										{
											"key": "podId",
											"value": "{{[Predefined]-PodId}}",
											"disabled": true
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Get Customer by ID",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Extract the response JSON",
											"var response = pm.response.json();",
											"var customer = response[\"data\"];",
											"",
											"// Define the expected fields for type Customer",
											"var expectedFields = [\"id\", \"firstName\", \"lastName\", \"email\", \"netWorth\", \"podRef\"];",
											"",
											"// Test for expected fields are present in the response",
											"pm.test(\"Response contains expected Customer fields\", function() {",
											"    // Loop through each expected field",
											"    expectedFields.forEach(function(field) {",
											"        // Check if the field exists in the response",
											"        pm.expect(customer.hasOwnProperty(field)).to.be.true;",
											"    });",
											"});",
											"",
											"// Test status code should be 200",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"// Test for response time",
											"pm.test(\"Response time is less than 200ms\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(200);",
											"});",
											"",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{base-url}}/api/customer/{{Generated-CustomerId}}",
									"host": [
										"{{base-url}}"
									],
									"path": [
										"api",
										"customer",
										"{{Generated-CustomerId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get Customers By PodId",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Extract the response JSON",
											"var response = pm.response.json();",
											"var customers = response[\"data\"][\"data\"];",
											"",
											"// Define the expected fields for type Customer",
											"var expectedFields = [\"id\", \"firstName\", \"lastName\", \"email\", \"netWorth\", \"podRef\"];",
											"",
											"// Test for expected fields are present in the response",
											"pm.test(\"Response contains expected Customer fields\", function() {",
											"    customers.forEach(function(customer){",
											"        // Loop through each expected field",
											"        expectedFields.forEach(function(field) {",
											"            // Check if the field exists in the response",
											"            pm.expect(customer.hasOwnProperty(field)).to.be.true;",
											"        });",
											"    })",
											"        ",
											"});",
											"",
											"// Test status code should be 200",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"// Test for response time",
											"pm.test(\"Response time is less than 200ms\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(200);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{base-url}}/api/customer?podId={{Predefined-PodId}}",
									"host": [
										"{{base-url}}"
									],
									"path": [
										"api",
										"customer"
									],
									"query": [
										{
											"key": "count",
											"value": "1",
											"disabled": true
										},
										{
											"key": "cursor",
											"value": "",
											"disabled": true
										},
										{
											"key": "podId",
											"value": "{{Predefined-PodId}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Get Customer By Email",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Extract the response JSON",
											"var response = pm.response.json();",
											"var data = response[\"data\"];",
											"",
											"// Define the expected fields for type Customer",
											"var expectedFields = [\"id\", \"firstName\", \"lastName\", \"email\", \"netWorth\", \"podRef\"];",
											"",
											"// Test for expected fields are present in the response",
											"pm.test(\"Response contains expected Customer fields\", function() {",
											"    // Loop through each expected field",
											"    expectedFields.forEach(function(field) {",
											"        // Check if the field exists in the response",
											"        pm.expect(data.hasOwnProperty(field)).to.be.true;",
											"    });",
											"});",
											"",
											"// Test status code should be 200",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"// Test for response time",
											"pm.test(\"Response time is less than 200ms\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(200);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"email\": \"michael.johnson@example.com\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base-url}}/api/customer?email={{Predefined-CustomerEmail}}",
									"host": [
										"{{base-url}}"
									],
									"path": [
										"api",
										"customer"
									],
									"query": [
										{
											"key": "email",
											"value": "{{Predefined-CustomerEmail}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Update Customer by ID",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Extract the response JSON",
											"var response = pm.response.json();",
											"var customer = response[\"data\"];",
											"",
											"// Define the expected fields for type Customer",
											"var expectedValues = {",
											"    firstName: \"pmPATCH\",",
											"    lastName: \"pmPATCH\",",
											"    email: \"Test-patch@example.com\",",
											"    netWorth: 1",
											"}",
											"",
											"// Test for expected fields are present in the response",
											"pm.test(\"Patch Response contains expected Customer values\", function() {",
											"    // Loop through each expected field",
											"    Object.keys(expectedValues).forEach(function(key) {",
											"        pm.expect(customer[key]).to.eql(expectedValues[key]);",
											"    });",
											"});",
											"",
											"// Test status code should be 200",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"// Test for response time",
											"pm.test(\"Response time is less than 200ms\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(200);",
											"});",
											"",
											"",
											"",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"firstName\": \"pmPATCH\",\n    \"lastName\": \"pmPATCH\",\n    \"email\": \"Test-patch@example.com\",\n    \"netWorth\": 1\n}\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base-url}}/api/customer/{{Generated-CustomerId}}",
									"host": [
										"{{base-url}}"
									],
									"path": [
										"api",
										"customer",
										"{{Generated-CustomerId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete Customer by ID",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Extract the response JSON",
											"var response = pm.response.json();",
											"var customer = response[\"data\"];",
											"",
											"// Define the expected fields for type Customer",
											"var expectedFields = [\"ref\", \"cause\"];",
											"",
											"// Test for expected fields are present in the response",
											"pm.test(\"Response indicates Customer was deleted\", function() {",
											"    // Loop through each expected field",
											"    expectedFields.forEach(function(field) {",
											"        // Check if the field exists in the response",
											"        pm.expect(customer.hasOwnProperty(field)).to.be.true;",
											"    })",
											"        ",
											"});",
											"",
											"// Test status code should be 200",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"// Test for response time",
											"pm.test(\"Response time is less than 200ms\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(200);",
											"});",
											"",
											"",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{base-url}}/api/customer/{{Generated-CustomerId}}",
									"host": [
										"{{base-url}}"
									],
									"path": [
										"api",
										"customer",
										"{{Generated-CustomerId}}"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "4-5XX Client/Server Error",
					"item": [
						{
							"name": "Create Customer (Invalid Request Body)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Extract the response JSON",
											"var customer = pm.response.json();",
											"",
											"// Define the expected fields for type Customer",
											"var expectedFields = [\"statusCode\", \"statusMessage\", \"message\"];",
											"",
											"// Test for expected fields are present in the response",
											"pm.test(\"Response contains expected error response fields\", function() {",
											"    // Loop through each expected field",
											"    expectedFields.forEach(function(field) {",
											"        // Check if the field exists in the response",
											"        pm.expect(customer.hasOwnProperty(field)).to.be.true;",
											"    });",
											"        ",
											"});",
											"",
											"// Test status code should be 200",
											"pm.test(\"Status code is 500\", function () {",
											"    pm.response.to.have.status(500);",
											"});",
											"",
											"// Test for response time",
											"pm.test(\"Response time is less than 200ms\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(200);",
											"});",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"firstName\": \"Example_First_Name\",\n    \"lastName\": \"Example_Last_Name\",\n    \"email\": \"test.user@example.com\",\n    \"netWorth\": 999999999\n}\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base-url}}/api/customer/",
									"host": [
										"{{base-url}}"
									],
									"path": [
										"api",
										"customer",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "Get All Customers (invalid cursor)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Extract the response JSON",
											"var response = pm.response.json();",
											"var data = response[\"data\"][\"data\"];",
											"",
											"// Define the expected fields for type Customer",
											"var expectedFields = [\"id\", \"firstName\", \"lastName\", \"email\", \"netWorth\", \"podRef\"];",
											"",
											"// Test for expected fields are present in the response",
											"pm.test(\"Response contains expected Customer fields\", function() {",
											"    data.forEach(function(customer){",
											"        // Loop through each expected field",
											"        expectedFields.forEach(function(field) {",
											"            // Check if the field exists in the response",
											"            pm.expect(customer.hasOwnProperty(field)).to.be.true;",
											"        });",
											"    })",
											"        ",
											"});",
											"",
											"// Test status code should be 200",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"// Test for response time",
											"pm.test(\"Response time is less than 200ms\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(200);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{base-url}}/api/customer",
									"host": [
										"{{base-url}}"
									],
									"path": [
										"api",
										"customer"
									],
									"query": [
										{
											"key": "count",
											"value": "1",
											"disabled": true
										},
										{
											"key": "cursor",
											"value": "",
											"disabled": true
										},
										{
											"key": "podId",
											"value": "{{[Predefined]-PodId}}",
											"disabled": true
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Get Customer by ID (invalid CustomerId)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Extract the response JSON",
											"var customer = pm.response.json();",
											"",
											"// Define the expected fields for type Customer",
											"var expectedFields = [\"statusCode\", \"statusMessage\", \"message\"];",
											"",
											"// Test for expected fields are present in the response",
											"pm.test(\"Response contains expected error response fields\", function() {",
											"    // Loop through each expected field",
											"    expectedFields.forEach(function(field) {",
											"        // Check if the field exists in the response",
											"        pm.expect(customer.hasOwnProperty(field)).to.be.true;",
											"    });",
											"        ",
											"});",
											"",
											"// Test status code should be 200",
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											"// Test for response time",
											"pm.test(\"Response time is less than 200ms\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(200);",
											"});",
											"",
											"",
											"",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{base-url}}/api/customer/{{InvalidCustomerId}}",
									"host": [
										"{{base-url}}"
									],
									"path": [
										"api",
										"customer",
										"{{InvalidCustomerId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get Customers By PodId (invalid PodId)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Extract the response JSON",
											"var customer = pm.response.json();",
											"",
											"// Define the expected fields for type Customer",
											"var expectedFields = [\"statusCode\", \"statusMessage\", \"message\"];",
											"",
											"// Test for expected fields are present in the response",
											"pm.test(\"Response contains expected error response fields\", function() {",
											"    // Loop through each expected field",
											"    expectedFields.forEach(function(field) {",
											"        // Check if the field exists in the response",
											"        pm.expect(customer.hasOwnProperty(field)).to.be.true;",
											"    });",
											"        ",
											"});",
											"",
											"// Test status code should be 200",
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											"// Test for response time",
											"pm.test(\"Response time is less than 200ms\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(200);",
											"});",
											"",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{base-url}}/api/customer?podId={{InvalidPodId}}",
									"host": [
										"{{base-url}}"
									],
									"path": [
										"api",
										"customer"
									],
									"query": [
										{
											"key": "count",
											"value": "1",
											"disabled": true
										},
										{
											"key": "cursor",
											"value": "",
											"disabled": true
										},
										{
											"key": "podId",
											"value": "{{InvalidPodId}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Get Customer By Email (Invalid Email)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Extract the response JSON",
											"var customer = pm.response.json();",
											"",
											"// Define the expected fields for type Customer",
											"var expectedFields = [\"statusCode\", \"statusMessage\", \"message\"];",
											"",
											"// Test for expected fields are present in the response",
											"pm.test(\"Response contains expected error response fields\", function() {",
											"    // Loop through each expected field",
											"    expectedFields.forEach(function(field) {",
											"        // Check if the field exists in the response",
											"        pm.expect(customer.hasOwnProperty(field)).to.be.true;",
											"    });",
											"        ",
											"});",
											"",
											"// Test status code should be 200",
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											"// Test for response time",
											"pm.test(\"Response time is less than 200ms\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(200);",
											"});",
											"",
											"// Store the created customer to be deleted later from database",
											"pm.environment.set(\"Generated-CustomerId\", customer.id);",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"email\": \"michael.johnson@example.com\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base-url}}/api/customer?email={{InvalidEmail}}",
									"host": [
										"{{base-url}}"
									],
									"path": [
										"api",
										"customer"
									],
									"query": [
										{
											"key": "email",
											"value": "{{InvalidEmail}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Update Customer by ID (Invalid CustomerId)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Extract the response JSON",
											"var customer = pm.response.json();",
											"",
											"// Define the expected fields for type Customer",
											"var expectedFields = [\"statusCode\", \"statusMessage\", \"message\"];",
											"",
											"// Test for expected fields are present in the response",
											"pm.test(\"Response contains expected error response fields\", function() {",
											"    // Loop through each expected field",
											"    expectedFields.forEach(function(field) {",
											"        // Check if the field exists in the response",
											"        pm.expect(customer.hasOwnProperty(field)).to.be.true;",
											"    });",
											"        ",
											"});",
											"",
											"// Test status code should be 200",
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											"// Test for response time",
											"pm.test(\"Response time is less than 200ms\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(200);",
											"});",
											"",
											"// Store the created customer to be deleted later from database",
											"pm.environment.set(\"Generated-CustomerId\", customer.id);",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"firstName\": \"pmPATCH\",\n    \"lastName\": \"pmPATCH\",\n    \"email\": \"pm.PATCH@example.com\",\n    \"netWorth\": 1\n}\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base-url}}/api/customer/{{InvalidCustomerId}}",
									"host": [
										"{{base-url}}"
									],
									"path": [
										"api",
										"customer",
										"{{InvalidCustomerId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete Customer by ID (Invalid CustomerId)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Extract the response JSON",
											"var customer = pm.response.json();",
											"",
											"// Define the expected fields for type Customer",
											"var expectedFields = [\"statusCode\", \"statusMessage\", \"message\"];",
											"",
											"// Test for expected fields are present in the response",
											"pm.test(\"Response contains expected error response fields\", function() {",
											"    // Loop through each expected field",
											"    expectedFields.forEach(function(field) {",
											"        // Check if the field exists in the response",
											"        pm.expect(customer.hasOwnProperty(field)).to.be.true;",
											"    });",
											"        ",
											"});",
											"",
											"// Test status code should be 200",
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											"// Test for response time",
											"pm.test(\"Response time is less than 200ms\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(200);",
											"});",
											"",
											"",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{base-url}}/api/customer/{{InvalidCustomerId}}",
									"host": [
										"{{base-url}}"
									],
									"path": [
										"api",
										"customer",
										"{{InvalidCustomerId}}"
									]
								}
							},
							"response": []
						}
					]
				}
			]
		},
		{
			"name": "Meeting",
			"item": [
				{
					"name": "200 OK",
					"item": [
						{
							"name": "Create Meeting",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Extract the response JSON",
											"var response = pm.response.json();",
											"var meeting = response[\"data\"];",
											"",
											"// Define the expected fields for type Customer",
											"var expectedFields = [\"id\", \"startTime\", \"endTime\", \"timeZone\", \"podRef\", \"vimeoId\", \"roomId\", \"roomCode\"];",
											"",
											"// Test for expected fields are present in the response",
											"pm.test(\"Response contains expected Meeting fields\", function() {",
											"    // Loop through each expected field",
											"    expectedFields.forEach(function(field) {",
											"        // Check if the field exists in the response",
											"        pm.expect(meeting.hasOwnProperty(field)).to.be.true;",
											"    });",
											"        ",
											"});",
											"",
											"// Test status code should be 200",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"// Test for response time",
											"pm.test(\"Response time is less than 4000ms\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(4000);",
											"});",
											"",
											"pm.environment.unset(\"Generated-MeetingId\");",
											"pm.environment.set(\"Generated-MeetingId\", meeting.id);",
											"",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"startTime\": \"2026-10-30T09:00:00Z\",\n    \"endTime\": \"2026-10-30T10:00:00Z\",\n    \"timeZone\" : \"PST\",\n    \"podRef\": \"382425683595362372\",\n    \"vimeoId\": \"4832895043\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base-url}}/api/meeting/",
									"host": [
										"{{base-url}}"
									],
									"path": [
										"api",
										"meeting",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "Get Meetings",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Extract the response JSON",
											"var response = pm.response.json();",
											"var meetings = response[\"data\"][\"data\"];",
											"",
											"// Define the expected fields for type Meeting",
											"var expectedFields = [\"id\", \"startTime\", \"endTime\", \"timeZone\", \"podRef\", \"vimeoId\", \"roomId\", \"roomCode\"];",
											"",
											"// Test for expected fields are present in the response",
											"pm.test(\"Response contains expected Meeting fields\", function() {",
											"    meetings.forEach(function(meeting){",
											"        // Loop through each expected field",
											"        expectedFields.forEach(function(field) {",
											"            // Check if the field exists in the response",
											"            pm.expect(meeting.hasOwnProperty(field)).to.be.true;",
											"        });",
											"    })",
											"        ",
											"});",
											"",
											"// Test status code should be 200",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"// Test for response time",
											"pm.test(\"Response time is less than 200ms\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(200);",
											"});",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{base-url}}/api/meeting",
									"host": [
										"{{base-url}}"
									],
									"path": [
										"api",
										"meeting"
									],
									"query": [
										{
											"key": "podId",
											"value": "382425683595362372",
											"disabled": true
										},
										{
											"key": "count",
											"value": "10",
											"disabled": true
										},
										{
											"key": "cursor",
											"value": "hdWCxmdNZWV0aW5ngcqEY2FsbID09oCBzUoFdtXfAXAARAQCwYIaZi7N1hoYObDQCg",
											"disabled": true
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Get Meetings by PodId",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Extract the response JSON",
											"var response = pm.response.json();",
											"var meetings = response[\"data\"][\"data\"];",
											"",
											"/// Define the expected fields for type Meeting",
											"var expectedFields = [\"id\", \"startTime\", \"endTime\", \"timeZone\", \"podRef\", \"vimeoId\", \"roomId\", \"roomCode\"];",
											"",
											"",
											"// Test for expected fields are present in the response",
											"pm.test(\"Response contains expected Meeting fields\", function() {",
											"    meetings.forEach(function(meeting){",
											"        // Loop through each expected field",
											"        expectedFields.forEach(function(field) {",
											"            // Check if the field exists in the response",
											"            pm.expect(meeting.hasOwnProperty(field)).to.be.true;",
											"        });",
											"    })",
											"        ",
											"});",
											"",
											"// Test status code should be 200",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"// Test for response time",
											"pm.test(\"Response time is less than 200ms\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(200);",
											"});",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{base-url}}/api/meeting?podId={{Predefined-PodId}}",
									"host": [
										"{{base-url}}"
									],
									"path": [
										"api",
										"meeting"
									],
									"query": [
										{
											"key": "count",
											"value": "1",
											"disabled": true
										},
										{
											"key": "cursor",
											"value": "hdWD1YPGgmdNZWV0aW5ngwAAZipudWxsKoHKhoMAAGYqbnVsbCqCY2FsbIMAAGYqbnVsbCqA9PaDAABmKm51bGwqgwAAZipudWxsKoHKhoMAAGYqbnVsbCqCZiR3aGVyZYMAAGYqbnVsbCqC1IKCxoSCY3BvZIMAAGYqbnVsbCr2xoJidjCDAABmKm51bGwqgwAAZipudWxsKsfMhIGCZSR0aGlzgwAAZipudWxsKvbOhNWDxoJlJHRoaXODGCsYK2cqcXVlcnkqgcmDgxgrGCxnKnF1ZXJ5KoJmcG9kUmVmgxgsGDJnKnF1ZXJ5KvSDGCsYMmcqcXVlcnkqgmI9PYMYMxg1ZypxdWVyeSrGgmNwb2SDGDYYOWcqcXVlcnkqgxg2GDlnKnF1ZXJ5KoMAAGYqbnVsbCqDAABmKm51bGwqxoJidjGDAABmKm51bGwq9PaDAABmKm51bGwqgwAAZipudWxsKoLNSgVOpiIPsABEBAH2gc1KBUg2k0UgAEEEAsGCGmXDMG8aF9XWUAE=",
											"disabled": true
										},
										{
											"key": "podId",
											"value": "{{Predefined-PodId}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Get Meeting by ID",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Extract the response JSON",
											"var response = pm.response.json();",
											"var data = response[\"data\"];",
											"",
											"// Define the expected fields for type Meeting",
											"var expectedFields = [\"id\", \"startTime\", \"endTime\", \"timeZone\", \"podRef\", \"vimeoId\", \"roomId\", \"roomCode\"];",
											"",
											"// Test for expected fields are present in the response",
											"pm.test(\"Response contains expected Meeting fields\", function() {",
											"    // Loop through each expected field",
											"    expectedFields.forEach(function(field) {",
											"        // Check if the field exists in the response",
											"        pm.expect(data.hasOwnProperty(field)).to.be.true;",
											"    });",
											"});",
											"",
											"// Test status code should be 200",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"// Test for response time",
											"pm.test(\"Response time is less than 200ms\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(200);",
											"});",
											"",
											"",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{base-url}}/api/meeting/{{Generated-MeetingId}}",
									"host": [
										"{{base-url}}"
									],
									"path": [
										"api",
										"meeting",
										"{{Generated-MeetingId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update Meeting by ID",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Extract the response JSON",
											"var response = pm.response.json();",
											"var meeting = response[\"data\"];",
											"",
											"// Define the expected fields for type Customer",
											"var expectedValues = {",
											"    \"timeZone\": \"EST\"",
											"}",
											"",
											"// Test for expected fields are present in the response",
											"pm.test(\"Patch Response contains expected Meeting values\", function() {",
											"    // Loop through each expected field",
											"    Object.keys(expectedValues).forEach(function(key) {",
											"        pm.expect(meeting[key]).to.eql(expectedValues[key]);",
											"    });",
											"});",
											"",
											"// Test status code should be 200",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"// Test for response time",
											"pm.test(\"Response time is less than 200ms\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(200);",
											"});",
											"",
											"",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"timeZone\" : \"EST\"\n\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base-url}}/api/meeting/{{Generated-MeetingId}}",
									"host": [
										"{{base-url}}"
									],
									"path": [
										"api",
										"meeting",
										"{{Generated-MeetingId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete Meeting by ID",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Extract the response JSON",
											"var response = pm.response.json();",
											"var meeting = response[\"data\"];",
											"",
											"// Define the expected fields for type Meeting",
											"var expectedFields = [\"ref\", \"cause\"];",
											"",
											"// Test for expected fields are present in the response",
											"pm.test(\"Response indicates Meeting was deleted\", function() {",
											"    // Loop through each expected field",
											"    expectedFields.forEach(function(field) {",
											"        // Check if the field exists in the response",
											"        pm.expect(meeting.hasOwnProperty(field)).to.be.true;",
											"    })",
											"        ",
											"});",
											"",
											"// Test status code should be 200",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"// Test for response time",
											"pm.test(\"Response time is less than 3000ms\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(3000);",
											"});",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{base-url}}/api/meeting/{{Generated-MeetingId}}",
									"host": [
										"{{base-url}}"
									],
									"path": [
										"api",
										"meeting",
										"{{Generated-MeetingId}}"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "4-5XX Client/Server Error",
					"item": [
						{
							"name": "Create Meeting (Invalid Request Body)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Extract the response JSON",
											"var meeting = pm.response.json();",
											"",
											"// Define the expected fields for type Meeting",
											"var expectedFields = [\"statusCode\", \"statusMessage\", \"message\"];",
											"",
											"// Test for expected fields are present in the response",
											"pm.test(\"Response contains expected error response fields\", function() {",
											"    // Loop through each expected field",
											"    expectedFields.forEach(function(field) {",
											"        // Check if the field exists in the response",
											"        pm.expect(meeting.hasOwnProperty(field)).to.be.true;",
											"    });",
											"        ",
											"});",
											"",
											"// Test status code should be 200",
											"pm.test(\"Status code is 500\", function () {",
											"    pm.response.to.have.status(500);",
											"});",
											"",
											"// Test for response time",
											"pm.test(\"Response time is less than 200ms\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(200);",
											"});",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"startTime\": \"2026-10-30T09:00:00Z\",\n    \"endTime\": \"2026-10-30T10:00:00Z\",\n    \"timeZone\" : \"pmTEST\",\n    \"podRef\": \"382425683595362372\",\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base-url}}/api/meeting/",
									"host": [
										"{{base-url}}"
									],
									"path": [
										"api",
										"meeting",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "Get Meetings (invalid cursor)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Extract the response JSON",
											"var meeting = pm.response.json();",
											"",
											"// Define the expected fields for type Customer",
											"var expectedFields = [\"statusCode\", \"statusMessage\", \"message\"];",
											"",
											"// Test for expected fields are present in the response",
											"pm.test(\"Response contains expected error response fields\", function() {",
											"    // Loop through each expected field",
											"    expectedFields.forEach(function(field) {",
											"        // Check if the field exists in the response",
											"        pm.expect(meeting.hasOwnProperty(field)).to.be.true;",
											"    });",
											"        ",
											"});",
											"",
											"// Test status code should be 200",
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											"// Test for response time",
											"pm.test(\"Response time is less than 200ms\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(200);",
											"});",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{base-url}}/api/meeting?count=10&cursor=123",
									"host": [
										"{{base-url}}"
									],
									"path": [
										"api",
										"meeting"
									],
									"query": [
										{
											"key": "podId",
											"value": "382425683595362372",
											"disabled": true
										},
										{
											"key": "count",
											"value": "10"
										},
										{
											"key": "cursor",
											"value": "123"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Get Meetings by PodId (Invalid PodId)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Extract the response JSON",
											"var meeting = pm.response.json();",
											"",
											"// Define the expected fields for type Customer",
											"var expectedFields = [\"statusCode\", \"statusMessage\", \"message\"];",
											"",
											"// Test for expected fields are present in the response",
											"pm.test(\"Response contains expected error response fields\", function() {",
											"    // Loop through each expected field",
											"    expectedFields.forEach(function(field) {",
											"        // Check if the field exists in the response",
											"        pm.expect(meeting.hasOwnProperty(field)).to.be.true;",
											"    });",
											"        ",
											"});",
											"",
											"// Test status code should be 200",
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											"// Test for response time",
											"pm.test(\"Response time is less than 200ms\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(200);",
											"});",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{base-url}}/api/meeting?podId={{InvalidPodId}}",
									"host": [
										"{{base-url}}"
									],
									"path": [
										"api",
										"meeting"
									],
									"query": [
										{
											"key": "count",
											"value": "1",
											"disabled": true
										},
										{
											"key": "cursor",
											"value": "hdWD1YPGgmdNZWV0aW5ngwAAZipudWxsKoHKhoMAAGYqbnVsbCqCY2FsbIMAAGYqbnVsbCqA9PaDAABmKm51bGwqgwAAZipudWxsKoHKhoMAAGYqbnVsbCqCZiR3aGVyZYMAAGYqbnVsbCqC1IKCxoSCY3BvZIMAAGYqbnVsbCr2xoJidjCDAABmKm51bGwqgwAAZipudWxsKsfMhIGCZSR0aGlzgwAAZipudWxsKvbOhNWDxoJlJHRoaXODGCsYK2cqcXVlcnkqgcmDgxgrGCxnKnF1ZXJ5KoJmcG9kUmVmgxgsGDJnKnF1ZXJ5KvSDGCsYMmcqcXVlcnkqgmI9PYMYMxg1ZypxdWVyeSrGgmNwb2SDGDYYOWcqcXVlcnkqgxg2GDlnKnF1ZXJ5KoMAAGYqbnVsbCqDAABmKm51bGwqxoJidjGDAABmKm51bGwq9PaDAABmKm51bGwqgwAAZipudWxsKoLNSgVOpiIPsABEBAH2gc1KBUg2k0UgAEEEAsGCGmXDMG8aF9XWUAE=",
											"disabled": true
										},
										{
											"key": "podId",
											"value": "{{InvalidPodId}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Get Meeting by ID (Invalid MeetingId)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Extract the response JSON",
											"var meeting = pm.response.json();",
											"",
											"// Define the expected fields for type Customer",
											"var expectedFields = [\"statusCode\", \"statusMessage\", \"message\"];",
											"",
											"// Test for expected fields are present in the response",
											"pm.test(\"Response contains expected error response fields\", function() {",
											"    // Loop through each expected field",
											"    expectedFields.forEach(function(field) {",
											"        // Check if the field exists in the response",
											"        pm.expect(meeting.hasOwnProperty(field)).to.be.true;",
											"    });",
											"        ",
											"});",
											"",
											"// Test status code should be 200",
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											"// Test for response time",
											"pm.test(\"Response time is less than 200ms\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(200);",
											"});",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{base-url}}/api/meeting/{{InvalidMeetingId}}",
									"host": [
										"{{base-url}}"
									],
									"path": [
										"api",
										"meeting",
										"{{InvalidMeetingId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update Meeting by ID",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Extract the response JSON",
											"var meeting = pm.response.json();",
											"",
											"// Define the expected fields for type Customer",
											"var expectedFields = [\"statusCode\", \"statusMessage\", \"message\"];",
											"",
											"// Test for expected fields are present in the response",
											"pm.test(\"Response contains expected error response fields\", function() {",
											"    // Loop through each expected field",
											"    expectedFields.forEach(function(field) {",
											"        // Check if the field exists in the response",
											"        pm.expect(meeting.hasOwnProperty(field)).to.be.true;",
											"    });",
											"        ",
											"});",
											"",
											"// Test status code should be 200",
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											"// Test for response time",
											"pm.test(\"Response time is less than 200ms\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(200);",
											"});",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"timeZone\" : \"PST\"\n\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base-url}}/api/meeting/{{InvalidMeetingId}}",
									"host": [
										"{{base-url}}"
									],
									"path": [
										"api",
										"meeting",
										"{{InvalidMeetingId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete Meeting by ID",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Extract the response JSON",
											"var meeting = pm.response.json();",
											"",
											"// Define the expected fields for type Customer",
											"var expectedFields = [\"statusCode\", \"statusMessage\", \"message\"];",
											"",
											"// Test for expected fields are present in the response",
											"pm.test(\"Response contains expected error response fields\", function() {",
											"    // Loop through each expected field",
											"    expectedFields.forEach(function(field) {",
											"        // Check if the field exists in the response",
											"        pm.expect(meeting.hasOwnProperty(field)).to.be.true;",
											"    });",
											"        ",
											"});",
											"",
											"// Test status code should be 200",
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											"// Test for response time",
											"pm.test(\"Response time is less than 200ms\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(200);",
											"});",
											"",
											"",
											"",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{base-url}}/api/meeting/{{InvalidMeetingId}}",
									"host": [
										"{{base-url}}"
									],
									"path": [
										"api",
										"meeting",
										"{{InvalidMeetingId}}"
									]
								}
							},
							"response": []
						}
					]
				}
			]
		},
		{
			"name": "Pod",
			"item": [
				{
					"name": "200 OK",
					"item": [
						{
							"name": "Create Pod",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Extract the response JSON",
											"var response = pm.response.json();",
											"var pod = response[\"data\"];",
											"",
											"// Define the expected fields for type Pod",
											"var expectedFields = [\"id\", \"name\", \"meetingTime\", \"leader\"];",
											"",
											"// Test for expected fields are present in the response",
											"pm.test(\"Response contains expected Pod fields\", function() {",
											"    // Loop through each expected field",
											"    expectedFields.forEach(function(field) {",
											"        // Check if the field exists in the response",
											"        pm.expect(pod.hasOwnProperty(field)).to.be.true;",
											"    });",
											"});",
											"",
											"// Test status code should be 200",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"// Test for response time",
											"pm.test(\"Response time is less than 200ms\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(200);",
											"});",
											"",
											"",
											"",
											"",
											"pm.environment.set(\"Generated-PodId\", pod.id);",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"name\": \"TEST Pod\",\n\t\"meetingTime\": \"2023-12-30T10:00:00Z\",\n    \"leader\": \"379073410901213249\"\n    \n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base-url}}/api/pod/",
									"host": [
										"{{base-url}}"
									],
									"path": [
										"api",
										"pod",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "Get Pods",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Extract the response JSON",
											"var response = pm.response.json();",
											"var pods = response[\"data\"][\"data\"];",
											"",
											"// Define the expected fields for type Pod",
											"var expectedFields = [\"id\", \"name\", \"meetingTime\", \"leader\"];",
											"",
											"// Test for expected fields are present in the response",
											"pm.test(\"Response contains expected Pod fields\", function() {",
											"    pods.forEach(function(pod){",
											"        // Loop through each expected field",
											"        expectedFields.forEach(function(field) {",
											"            // Check if the field exists in the response",
											"            pm.expect(pod.hasOwnProperty(field)).to.be.true;",
											"        });",
											"    })",
											"        ",
											"});",
											"",
											"// Test status code should be 200",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"// Test for response time",
											"pm.test(\"Response time is less than 200ms\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(200);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{base-url}}/api/pod",
									"host": [
										"{{base-url}}"
									],
									"path": [
										"api",
										"pod"
									],
									"query": [
										{
											"key": "count",
											"value": "1",
											"disabled": true
										},
										{
											"key": "cursor",
											"value": "hdWDxoJjUG9kgwAAZipudWxsKoHKhoMAAGYqbnVsbCqCY2FsbIMAAGYqbnVsbCqA9PaDAABmKm51bGwqgwAAZipudWxsKoCBzUoFTqn7aOAARAQBwYIaZdDiKxoOHeBYAQ==",
											"disabled": true
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Get Pod by ID",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Extract the response JSON",
											"var response = pm.response.json();",
											"var pod = response[\"data\"];",
											"",
											"// Define the expected fields for type Pod",
											"var expectedFields = [\"id\", \"name\", \"meetingTime\", \"leader\"];",
											"",
											"// Test for expected fields are present in the response",
											"pm.test(\"Response contains expected Pod fields\", function() {",
											"    // Loop through each expected field",
											"    expectedFields.forEach(function(field) {",
											"        // Check if the field exists in the response",
											"        pm.expect(pod.hasOwnProperty(field)).to.be.true;",
											"    });",
											"});",
											"",
											"// Test status code should be 200",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"// Test for response time",
											"pm.test(\"Response time is less than 200ms\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(200);",
											"});",
											"",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{base-url}}/api/pod/{{Generated-PodId}}",
									"host": [
										"{{base-url}}"
									],
									"path": [
										"api",
										"pod",
										"{{Generated-PodId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update Pod by ID",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Extract the response JSON",
											"var response = pm.response.json();",
											"var pod = response[\"data\"];",
											"",
											"// Define the expected fields for type Pod",
											"var expectedFields = [\"id\", \"name\", \"meetingTime\", \"leader\"];",
											"",
											"// Test for expected fields are present in the response",
											"pm.test(\"Response contains expected Pod fields\", function() {",
											"    // Loop through each expected field",
											"    expectedFields.forEach(function(field) {",
											"        // Check if the field exists in the response",
											"        pm.expect(pod.hasOwnProperty(field)).to.be.true;",
											"    });",
											"});",
											"",
											"// Test status code should be 200",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"// Test for response time",
											"pm.test(\"Response time is less than 200ms\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(200);",
											"});",
											"",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"title\": \"PATCH-TEST\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base-url}}/api/pod/{{Generated-PodId}}",
									"host": [
										"{{base-url}}"
									],
									"path": [
										"api",
										"pod",
										"{{Generated-PodId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete Pod by ID",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Extract the response JSON",
											"var response = pm.response.json();",
											"var pod = response[\"data\"];",
											"",
											"// Define the expected fields for deletion",
											"var expectedFields = [\"ref\", \"cause\"];",
											"",
											"// Test for expected fields are present in the response",
											"pm.test(\"Response indicates Pod was deleted\", function() {",
											"    // Loop through each expected field",
											"    expectedFields.forEach(function(field) {",
											"        // Check if the field exists in the response",
											"        pm.expect(pod.hasOwnProperty(field)).to.be.true;",
											"    })",
											"        ",
											"});",
											"",
											"// Test status code should be 200",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"// Test for response time",
											"pm.test(\"Response time is less than 200ms\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(200);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{base-url}}/api/pod/{{Generated-PodId}}",
									"host": [
										"{{base-url}}"
									],
									"path": [
										"api",
										"pod",
										"{{Generated-PodId}}"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "4-5XX Client/Server Error",
					"item": [
						{
							"name": "Create Pod (invalid Request Body)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Extract the response JSON",
											"var pod = pm.response.json();",
											"",
											"// Define the expected fields for type Customer",
											"var expectedFields = [\"statusCode\", \"statusMessage\", \"message\"];",
											"",
											"// Test for expected fields are present in the response",
											"pm.test(\"Response contains expected error response fields\", function() {",
											"    // Loop through each expected field",
											"    expectedFields.forEach(function(field) {",
											"        // Check if the field exists in the response",
											"        pm.expect(pod.hasOwnProperty(field)).to.be.true;",
											"    });",
											"        ",
											"});",
											"",
											"// Test status code should be 200",
											"pm.test(\"Status code is 500\", function () {",
											"    pm.response.to.have.status(500);",
											"});",
											"",
											"// Test for response time",
											"pm.test(\"Response time is less than 200ms\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(200);",
											"});",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"name\": \"TEST Pod\",\n\t\"meetingTime\": \"2023-12-30T10:00:00Z\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base-url}}/api/pod/",
									"host": [
										"{{base-url}}"
									],
									"path": [
										"api",
										"pod",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "Get Pod by ID (Invalid PodId)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Extract the response JSON",
											"var pod = pm.response.json();",
											"",
											"// Define the expected fields for type Customer",
											"var expectedFields = [\"statusCode\", \"statusMessage\", \"message\"];",
											"",
											"// Test for expected fields are present in the response",
											"pm.test(\"Response contains expected error response fields\", function() {",
											"    // Loop through each expected field",
											"    expectedFields.forEach(function(field) {",
											"        // Check if the field exists in the response",
											"        pm.expect(pod.hasOwnProperty(field)).to.be.true;",
											"    });",
											"        ",
											"});",
											"",
											"// Test status code should be 200",
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											"// Test for response time",
											"pm.test(\"Response time is less than 200ms\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(200);",
											"});",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{base-url}}/api/pod/{{InvalidPodId}}",
									"host": [
										"{{base-url}}"
									],
									"path": [
										"api",
										"pod",
										"{{InvalidPodId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update Pod by ID (Invalid PodId)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Extract the response JSON",
											"var pod = pm.response.json();",
											"",
											"// Define the expected fields for type Customer",
											"var expectedFields = [\"statusCode\", \"statusMessage\", \"message\"];",
											"",
											"// Test for expected fields are present in the response",
											"pm.test(\"Response contains expected error response fields\", function() {",
											"    // Loop through each expected field",
											"    expectedFields.forEach(function(field) {",
											"        // Check if the field exists in the response",
											"        pm.expect(pod.hasOwnProperty(field)).to.be.true;",
											"    });",
											"        ",
											"});",
											"",
											"// Test status code should be 200",
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											"// Test for response time",
											"pm.test(\"Response time is less than 200ms\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(200);",
											"});",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"title\": \"PATCH-TEST\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base-url}}/api/pod/{{InvalidPodId}}",
									"host": [
										"{{base-url}}"
									],
									"path": [
										"api",
										"pod",
										"{{InvalidPodId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete Pod by ID (invalid PodId))",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Extract the response JSON",
											"var pod = pm.response.json();",
											"",
											"// Define the expected fields for type Customer",
											"var expectedFields = [\"statusCode\", \"statusMessage\", \"message\"];",
											"",
											"// Test for expected fields are present in the response",
											"pm.test(\"Response contains expected error response fields\", function() {",
											"    // Loop through each expected field",
											"    expectedFields.forEach(function(field) {",
											"        // Check if the field exists in the response",
											"        pm.expect(pod.hasOwnProperty(field)).to.be.true;",
											"    });",
											"        ",
											"});",
											"",
											"// Test status code should be 200",
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											"// Test for response time",
											"pm.test(\"Response time is less than 200ms\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(200);",
											"});",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{base-url}}/api/pod/{{Generated-PodId}}",
									"host": [
										"{{base-url}}"
									],
									"path": [
										"api",
										"pod",
										"{{Generated-PodId}}"
									]
								}
							},
							"response": []
						}
					]
				}
			]
		},
		{
			"name": "Analytics",
			"item": [
				{
					"name": "200 OK",
					"item": [
						{
							"name": "Get Meetings",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Extract the response JSON",
											"var response = pm.response.json();",
											"var meetings = response[\"data\"]",
											"",
											"// Define the expected fields for type Meetings",
											"var expectedFields = [\"id\", \"pod_id\", \"pod_name\", \"start_time\", \"end_time\", \"time_zone\", \"peers\"];",
											"",
											"// Test for expected fields are present in the response",
											"pm.test(\"Response contains expected Meeting fields\", function() {",
											"    meetings.forEach(function(pod){",
											"        // Loop through each expected field",
											"        expectedFields.forEach(function(field) {",
											"            // Check if the field exists in the response",
											"            pm.expect(pod.hasOwnProperty(field)).to.be.true;",
											"        });",
											"    })",
											"        ",
											"});",
											"",
											"// Test status code should be 200",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"// Test for response time",
											"pm.test(\"Response time is less than 5000ms\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(5000);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{base-url}}/api/analytics/meeting?order=asc&count=50",
									"host": [
										"{{base-url}}"
									],
									"path": [
										"api",
										"analytics",
										"meeting"
									],
									"query": [
										{
											"key": "order",
											"value": "asc",
											"description": "'asc' or 'desc' order, sorted by 'startTime'"
										},
										{
											"key": "podId",
											"value": "394183450072973377",
											"description": "Filter meetings by by Pod ID",
											"disabled": true
										},
										{
											"key": "fromTime",
											"value": "",
											"description": "Lower bound filtering by 'startTime' ISO string",
											"disabled": true
										},
										{
											"key": "toTime",
											"value": "",
											"description": "Upper bound filtering by 'startTime' ISO string",
											"disabled": true
										},
										{
											"key": "cursor",
											"value": "hdWC1YLGYnYwgcqEZXRvU2V0gPT2gcqEZiR3aGVyZYLUgsaDY3BvZPbGYnYxx8yDgWUkdGhpc/bOg9WCxmUkdGhpc4HJgmZwb2RSZWb0Yj09xmNwb2TGYnYy9PaDmDvNSgV16BPsUABEBALNSgV2IGZpYABCBALNSgV2SKUZQABBBALNSgV2SceVcABEBALNSgV2c7W5cABBBALNSgV2iyCkMABEBALNSgV2vfGnsABABALNSgV2yprBUABBBALNSgV20pJP8ABCBALNSgV21d8BcABEBALNSgV4HwLukABBBALNSgV2vqvKgABEBALNSgV4a8Jl8ABBBALNSgV4a7k38ABEBALNSgV4tW/qMABABALNSgV4tqkxAABEBALNSgV4wQP+MABEBALNSgV4u1vdkABABALNSgV5zqxjUABEBALNSgV6XrLmYABEBALNSgV6YRakMABBBALNSgV6+urXMABBBALNSgV7Af8CIABCBALNSgV7AhXEIABABALNSgV7AoLkUABCBALNSgV7BYHgUABCBALNSgV7CAv0IABCBALNSgV76jiaMABCBALNSgV77VD/MABEBALNSgV77X/2EABBBALNSgV8RlLfcABCBALNSgV8RpFKkABCBALNSgV8SYpJYABABALNSgV8m6mWUABCBALNSgV8nh3oUABBBALNSgV8pY/KMABEBALNSgV8+/3dQABABALNSgV9jF23gABCBALNSgV9ptrAgABEBALNSgV+Mizl4ABABALNSgV+ipnqcABBBALNSgV+lr05wABABALNSgV+icFFcABBBALNSgV+6GCjgABCBALNSgV/zlKIMABABALNSgV/zdhFwABABALNSgV/zlLusABCBALNSgV+ipBbsABBBALNSgV7Ua4RUABEBALNSgV7UcNvkABBBALNSgV7UehzcABEBALNSgV7U3LgEABEBALNSgV7U3fSEABEBALNSgV7U4LCEABBBALNSgV7UZXw4ABBBALNSgV7U+6XwABBBALNSgV7U/sOEABEBALNSgV7U/300ABEBALNSgV7aJRxwABEBALNSgVOpiIPsABEBAH2gRgxwYIaZiwSIhoV6eTQEA==",
											"description": "Cursor given by 'after' for pagination",
											"disabled": true
										},
										{
											"key": "count",
											"value": "50",
											"description": "Page size for pagination"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Get Meeting by ID",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Extract the response JSON",
											"var meeting = pm.response.json();",
											"",
											"// Define the expected fields for type Meetings",
											"var expectedFields = [\"id\", \"pod_name\", \"start_time\", \"end_time\", \"time_zone\", \"peers\"];",
											"",
											"// Test for expected fields are present in the response",
											"pm.test(\"Response contains expected Meeting fields\", function() {",
											"    // Loop through each expected field",
											"    expectedFields.forEach(function(field) {",
											"        // Check if the field exists in the response",
											"        pm.expect(meeting.hasOwnProperty(field)).to.be.true;",
											"    });",
											"        ",
											"});",
											"",
											"// Test status code should be 200",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"// Test for response time",
											"pm.test(\"Response time is less than 1200ms\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(1200);",
											"});",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{base-url}}/api/analytics/meeting/393733543289684034",
									"host": [
										"{{base-url}}"
									],
									"path": [
										"api",
										"analytics",
										"meeting",
										"393733543289684034"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "4-5XX Client/Server Errors",
					"item": [
						{
							"name": "Get Meetings (Invalid PodId)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Extract the response JSON",
											"var meeting = pm.response.json();",
											"",
											"// Define the expected fields for type Customer",
											"var expectedFields = [\"statusCode\", \"statusMessage\", \"message\"];",
											"",
											"// Test for expected fields are present in the response",
											"pm.test(\"Response contains expected error response fields\", function() {",
											"    // Loop through each expected field",
											"    expectedFields.forEach(function(field) {",
											"        // Check if the field exists in the response",
											"        pm.expect(meeting.hasOwnProperty(field)).to.be.true;",
											"    });",
											"        ",
											"});",
											"",
											"// Test status code should be 200",
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											"// Test for response time",
											"pm.test(\"Response time is less than 200ms\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(200);",
											"});",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{base-url}}/api/analytics/meeting?podId={{InvalidPodId}}",
									"host": [
										"{{base-url}}"
									],
									"path": [
										"api",
										"analytics",
										"meeting"
									],
									"query": [
										{
											"key": "order",
											"value": "asc",
											"description": "'asc' or 'desc' order, sorted by 'startTime'",
											"disabled": true
										},
										{
											"key": "podId",
											"value": "{{InvalidPodId}}",
											"description": "Filter meetings by by Pod ID"
										},
										{
											"key": "fromTime",
											"value": "",
											"description": "Lower bound filtering by 'startTime' ISO string",
											"disabled": true
										},
										{
											"key": "toTime",
											"value": "",
											"description": "Upper bound filtering by 'startTime' ISO string",
											"disabled": true
										},
										{
											"key": "cursor",
											"value": "hdWC1YLGYnYwgcqEZXRvU2V0gPT2gcqEZiR3aGVyZYLUgsaDY3BvZPbGYnYxx8yDgWUkdGhpc/bOg9WCxmUkdGhpc4HJgmZwb2RSZWb0Yj09xmNwb2TGYnYy9PaDmDvNSgV16BPsUABEBALNSgV2IGZpYABCBALNSgV2SKUZQABBBALNSgV2SceVcABEBALNSgV2c7W5cABBBALNSgV2iyCkMABEBALNSgV2vfGnsABABALNSgV2yprBUABBBALNSgV20pJP8ABCBALNSgV21d8BcABEBALNSgV4HwLukABBBALNSgV2vqvKgABEBALNSgV4a8Jl8ABBBALNSgV4a7k38ABEBALNSgV4tW/qMABABALNSgV4tqkxAABEBALNSgV4wQP+MABEBALNSgV4u1vdkABABALNSgV5zqxjUABEBALNSgV6XrLmYABEBALNSgV6YRakMABBBALNSgV6+urXMABBBALNSgV7Af8CIABCBALNSgV7AhXEIABABALNSgV7AoLkUABCBALNSgV7BYHgUABCBALNSgV7CAv0IABCBALNSgV76jiaMABCBALNSgV77VD/MABEBALNSgV77X/2EABBBALNSgV8RlLfcABCBALNSgV8RpFKkABCBALNSgV8SYpJYABABALNSgV8m6mWUABCBALNSgV8nh3oUABBBALNSgV8pY/KMABEBALNSgV8+/3dQABABALNSgV9jF23gABCBALNSgV9ptrAgABEBALNSgV+Mizl4ABABALNSgV+ipnqcABBBALNSgV+lr05wABABALNSgV+icFFcABBBALNSgV+6GCjgABCBALNSgV/zlKIMABABALNSgV/zdhFwABABALNSgV/zlLusABCBALNSgV+ipBbsABBBALNSgV7Ua4RUABEBALNSgV7UcNvkABBBALNSgV7UehzcABEBALNSgV7U3LgEABEBALNSgV7U3fSEABEBALNSgV7U4LCEABBBALNSgV7UZXw4ABBBALNSgV7U+6XwABBBALNSgV7U/sOEABEBALNSgV7U/300ABEBALNSgV7aJRxwABEBALNSgVOpiIPsABEBAH2gRgxwYIaZiwSIhoV6eTQEA==",
											"description": "Cursor given by 'after' for pagination",
											"disabled": true
										},
										{
											"key": "count",
											"value": "3",
											"description": "Page size for pagination",
											"disabled": true
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Get Meeting by ID (Invalid MeetingId)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Extract the response JSON",
											"var meeting = pm.response.json();",
											"",
											"// Define the expected fields for type Customer",
											"var expectedFields = [\"statusCode\", \"statusMessage\", \"message\"];",
											"",
											"// Test for expected fields are present in the response",
											"pm.test(\"Response contains expected error response fields\", function() {",
											"    // Loop through each expected field",
											"    expectedFields.forEach(function(field) {",
											"        // Check if the field exists in the response",
											"        pm.expect(meeting.hasOwnProperty(field)).to.be.true;",
											"    });",
											"        ",
											"});",
											"",
											"// Test status code should be 200",
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											"// Test for response time",
											"pm.test(\"Response time is less than 200ms\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(200);",
											"});",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{base-url}}/api/analytics/meeting/{{InvalidMeetingId}}",
									"host": [
										"{{base-url}}"
									],
									"path": [
										"api",
										"analytics",
										"meeting",
										"{{InvalidMeetingId}}"
									]
								}
							},
							"response": []
						}
					]
				}
			]
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "base-url",
			"value": "https://better-life-meet.vercel.app/",
			"type": "string"
		},
		{
			"key": "[Response]-MeetingPostId",
			"value": "390491831955095617"
		},
		{
			"key": "[Request]-PodId",
			"value": ""
		},
		{
			"key": "[Request]-CustomerId",
			"value": ""
		},
		{
			"key": "[Request]-CustomerEmail",
			"value": ""
		},
		{
			"key": "[TestData]-CustomerPostId",
			"value": ""
		},
		{
			"key": "[Response]-CustomerPostId",
			"value": ""
		},
		{
			"key": "[Generated]-CustomerId",
			"value": ""
		},
		{
			"key": "Generated-MeetingId",
			"value": ""
		},
		{
			"key": "Generated-PodId",
			"value": "396025467737473090"
		}
	]
}